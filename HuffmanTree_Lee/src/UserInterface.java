
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 *
 * @author bened
 */
public class UserInterface {
    
    //Recursive funciton to print Huffman Code through tree traversal
    //s is Huffman code generated
    public static void printCode(HuffmanNode root, String s) {     
        
        //This is our base case; if the left and right are null then it is a leaf
        //node, and we print the code 's' generated by traversing the tree
        if (root.left == null && root.right == null) {
            //c is the character in the node
            System.out.println(root.c + ":" + s);
            return;
        }
        
        //Reminder: if we go to the left then add "0" to the code and if we go
        //to the right add "1" to the code. The following are recursive calls for
        //left and right sub-trees of the generated tree
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }
    
    //This method obtains a character string from the user. It then separates out
    //all of the distinct characters into the distinctChars array and their associated
    //frequencies in the frequencies arrays. We also include error checking
    //try-catch in case the scanner fails
    public static void ObtainCharacters (PhraseAndFrequencies PF) {
        
        String line;
        Scanner userInput = new Scanner (System.in);
        
        while(true) {
            try {
                System.out.println("Please enter a phrase.");
                line = userInput.nextLine();
                //If we do not have a string (ie there was a read issue) or our
                //string is empty/null, we need to ask the user to provide a new
                //input. The loop will continue and give the user a second chance/
                if(!(line instanceof String) || line == null || line == "") {
                    System.out.println("Error: Incorect input provided.");
                } else {
                    //convert to a character array
                    for (char ch: line.toCharArray()) {
                        if (PF.checkCharacter(ch) == -1) {
                            //Does not exist, so add it
                            PF.AddCharacter(ch);
                        }
                        else {
                            //exists, so update the frequency
                            //Calls the method 'UpdateFrequency' from the class
                            //'PhraseAndFrequencies' if the character exists.
                            //The frequency of the character is then updated by 1
                            //Benedict Lee
                            PF.UpdateFrequency(ch);
                        }
                    }
                    //all good, exit
                    break;
                }
                //
                
            } catch (InputMismatchException e) {
                System.out.println("Error Occurred. Please contact your "
                        + "administrator.");
                userInput.nextLine();
            }
        }
        userInput.close();
    }
} //end of user interface class
